#!/bin/env python
__author__ = 'tunnell'
"""Build files from processed trigger events in output database.


the output format is Pickled.
TODO: merge with other commands"""

from configglue import schema
from configglue.glue import configglue
from wax.core.math import sizeof_fmt
from wax.core import Configuration

import logging
import pickle
import gzip

from tqdm import tqdm
import snappy

from wax import __version__
from wax.Database import OutputDBMongoInterface

def main(config):
    values = config.values('__main__')
    log = logging.getLogger('FileBuilder')

    log.debug("Establishing connection")

    output = OutputDBMongoInterface.MongoDBOutput(hostname=values.get('hostname'))
    try:
        collection = output.get_collection()
    except RuntimeError:
        log.error(
            "Uninitialized (empty? if so, run 'process'.) output database; no file made.")
        return

    cursor = collection.find()
    n = cursor.count()
    if n == 0:
        log.error("No events in the output database; no file made.")
        return

    f = gzip.open(values.get('filename'), 'wb')

    pickle.dump(__version__, f)

    log.info("Processing %d trigger events" % n)

    data_size = 0

    for i in tqdm(range(n)):
        doc = next(cursor)
        doc2 = snappy.uncompress(doc['compressed_doc'])
        doc2 = pickle.loads(doc2)
        data_size += len(doc2)
        pickle.dump(doc2, f)

    log.info("Size of file: %s " % sizeof_fmt(data_size))

    f.close()


if __name__ == '__main__':
    class eb(schema.Schema, Configuration.File, Configuration.Mongo):
        pass

    # glue everything together
    glue = configglue(eb,
                      ['config.ini'])
    print(glue)
    # run
    main(glue.schema_parser)